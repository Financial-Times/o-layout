@mixin oLayoutColumn($class: 'o-layout', $type: 'all') {
	@if $type == 'all' {
		@include oLayoutColumnLeft;
		@include oLayoutColumnCenter;
		@include oLayoutColumnCenterWithAside;
		@include oLayoutColumnRight;
		@include oLayoutColumnWide;
		@include oLayoutColumnTable;
	} @else if $type == 'left' {
		@include oLayoutColumnLeft($class)
	} @else if $type == 'center' {
		@include oLayoutColumnCenter($class)
	} @else if $type == 'center-aside' {
		@include oLayoutColumnCenterWithAside($class)
	} @else if $type == 'wide' {
		@include oLayoutColumnWide($class)
	} @else if $type == 'table' {
		@include oLayoutColumnTable($class)
	} @else {
		@include _oLayoutError('#{$type} is not an available column span, please use #{$_o-layout-columns} instead');
	}
}

@mixin oLayoutBreakPoint($from: false, $until: false) {
	@include mq(
		$from: $from,
		$until: $until,
		$breakpoints: $o-layout-breakpoints
	) {
		@content;
	}
}

@mixin oLayoutRule($side: 'left') {
	@if map-has-key($_o-layout-rules, $side) {
		border-width: map-get($_o-layout-rules, $side);
		border-color: oColorsGetPaletteColor('teal');
		border-style: solid;
		padding: 0 $_o-layout-gutter;
	} @else {
		@include _oLayoutError("#{$side} is not a rule side, please use 'left' or 'right'.");
	}
}

@mixin _oLayoutError($message) {
	@error '*** oLayout SCSS error: #{$message} ***';
};
