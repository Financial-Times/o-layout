@mixin oLayoutBreakPoint($from: false, $until: false) {
	@include mq(
		$from: $from,
		$until: $until,
		$breakpoints: $o-layout-breakpoints
	) {
		@content;
	}
}

@mixin _oLayoutGridBase () {
	min-width: 100%;
	margin: 0;
	position: relative;
	box-sizing: border-box;

	display: grid;
	grid-auto-rows: auto;
	grid-template-columns: 100%;
	grid-gap: $_o-layout-gutter;
	grid-template-areas:
		"header"
		"sidebar"
		"main"
		"footer";
}

@mixin _oLayoutBody () {
	@include oTypographySans(1);

	a {
		@include oTypographyLink();
		border: 0;
	}

	h1	{
		@include oTypographyProductHeadingLevel1();
	}

	h2 {
		@include oTypographyProductHeadingLevel2();
	}

	h3 {
		@include oTypographyProductHeadingLevel3();
	}

	h4 {
		@include oTypographyProductHeadingLevel4();
	}

	h5 {
		@include oTypographyProductHeadingLevel5();
	}

	h6 {
		@include oTypographyProductHeadingLevel6();
	}

	aside {
		@include _oLayoutRule('left');
		align-self: flex-start;
		font-style: italic;
	}

	p,
	ol,
	ul,
	pre,
	aside {
		margin: 0 0 1rem 0;
	}

	ol,
	ul {
		list-style-type: none;
		position: relative;
		padding-left: 1.5rem;

		li {
			margin-bottom: 0.5em;

			&:before {
				content: 'â€”';
				position: absolute;
				left: 0;
				color: oColorsGetPaletteColor('teal');
				font-weight: 900;
			}
		}
	}
}

@mixin _oLayoutRule($side: 'left') {
	@if map-has-key($_o-layout-rules, $side) {
		border-width: map-get($_o-layout-rules, $side);
		border-color: oColorsGetPaletteColor('teal');
		border-style: solid;
		padding: 0 $_o-layout-gutter;
	} @else {
		@include _oLayoutError("#{$side} is not a rule side, please use 'left' or 'right'.");
	}
}


@mixin _oLayoutError($message) {
	@error '*** oLayout SCSS error: #{$message} ***';
};
